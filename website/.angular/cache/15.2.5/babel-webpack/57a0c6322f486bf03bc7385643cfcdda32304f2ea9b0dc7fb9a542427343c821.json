{"ast":null,"code":"import { countryDialingCodes } from './country-dialing-codes';\nimport { phoneNumberErrorMessages } from './phone-number-error-messages';\nvar PhoneNumber = /** @class */function () {\n  function PhoneNumber(phoneNumber) {\n    this.areaCode = this.getAreaCode(phoneNumber);\n    this.prefix = this.getPrefixCode(phoneNumber);\n    this.suffix = this.getSuffixCode(phoneNumber);\n  }\n  PhoneNumber.prototype.getAreaCode = function (phoneNumber) {\n    return phoneNumber.substring(0, 3);\n  };\n  PhoneNumber.prototype.getPrefixCode = function (phoneNumber) {\n    return phoneNumber.substring(3, 6);\n  };\n  PhoneNumber.prototype.getSuffixCode = function (phoneNumber) {\n    return phoneNumber.substring(6);\n  };\n  PhoneNumber.prototype.getDefaultFormattedPhoneNumber = function () {\n    return \"(\".concat(this.areaCode, \") \").concat(this.prefix, \"-\").concat(this.suffix);\n  };\n  PhoneNumber.prototype.getHyphensFormattedPhoneNumber = function () {\n    return \"\".concat(this.areaCode, \"-\").concat(this.prefix, \"-\").concat(this.suffix);\n  };\n  PhoneNumber.prototype.getDotsFormattedPhoneNumber = function () {\n    return \"\".concat(this.areaCode, \".\").concat(this.prefix, \".\").concat(this.suffix);\n  };\n  PhoneNumber.prototype.getInternationCountryCodeStr = function (countryCode) {\n    countryCode = countryCode.toUpperCase();\n    var countryDialingCode = '';\n    if (countryDialingCodes[countryCode]) {\n      countryDialingCode = \"+\".concat(countryDialingCodes[countryCode]);\n    } else {\n      console.warn(phoneNumberErrorMessages.INVALID_COUNTRY_CODE_WARN);\n    }\n    return countryDialingCode;\n  };\n  PhoneNumber.prototype.getFormattedPhoneNumberStr = function (format, countryCode) {\n    if (format === void 0) {\n      format = 'default';\n    }\n    var formattedPhoneNumber = '';\n    switch (format.toLowerCase()) {\n      case 'default':\n        formattedPhoneNumber = this.getDefaultFormattedPhoneNumber();\n        break;\n      case 'dots':\n        formattedPhoneNumber = this.getDotsFormattedPhoneNumber();\n        break;\n      case 'hyphens':\n        formattedPhoneNumber = this.getHyphensFormattedPhoneNumber();\n        break;\n      default:\n        console.warn(phoneNumberErrorMessages.INVALID_FORMAT_WARN);\n        formattedPhoneNumber = this.getDefaultFormattedPhoneNumber();\n    }\n    return formattedPhoneNumber;\n  };\n  PhoneNumber.prototype.getFormattedPhoneNumber = function (format, countryCode) {\n    if (format === void 0) {\n      format = 'default';\n    }\n    var formattedPhoneNumber = this.getFormattedPhoneNumberStr(format);\n    var internationalCountryCodeStr = '';\n    if (countryCode && format) {\n      internationalCountryCodeStr = this.getInternationCountryCodeStr(countryCode);\n      formattedPhoneNumber = internationalCountryCodeStr ? \"\".concat(internationalCountryCodeStr, \" \").concat(formattedPhoneNumber) : \"\".concat(formattedPhoneNumber);\n    }\n    return formattedPhoneNumber;\n  };\n  return PhoneNumber;\n}();\nexport { PhoneNumber };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}