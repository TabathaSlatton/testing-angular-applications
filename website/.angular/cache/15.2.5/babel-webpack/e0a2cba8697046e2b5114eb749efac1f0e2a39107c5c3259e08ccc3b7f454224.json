{"ast":null,"code":"import { ElementRef, Renderer2 } from '@angular/core';\nimport { constants } from './favorite-icon.constants';\nimport * as i0 from \"@angular/core\";\n/**\n * FavoriteIconDirective\n * =====================\n * The FavoriteIconDirective takes in a boolean and applies a star depending\n * to the element depending on whether the boolean is true or false. If the\n * boolean is false, when the element is rolled over a outlined star appears,\n * otherwise a star with the primary color will show up. The default primary\n * color is gold. You can set the primary star color by specifying the second\n * optional color parameter.\n *\n * Usage:\n * <element [appFavoriteIcon]=\"expression\"></element>\n *\n * Example:\n * <i [appFavoriteIcon]=\"contact.favorite\"></i>\n *\n *\n * Color (optional)\n * ---------------------------------\n * The second parameter is the color of the star.\n *\n * Usage:\n * <element [appFavoriteIcon]=\"expression\" [color]=\"'color'\"></element>\n *\n * Example:\n * <i [appFavoriteIcon]=\"contact.favorite\" [color]=\"'blue'></i>\n */\nvar FavoriteIconDirective = /** @class */function () {\n  function FavoriteIconDirective(element, renderer) {\n    this._primaryColor = 'gold';\n    this._starClasses = constants.classes;\n    this.element = element.nativeElement;\n    this.renderer = renderer;\n  }\n  Object.defineProperty(FavoriteIconDirective.prototype, \"color\", {\n    set: function (primaryColorName) {\n      if (primaryColorName) {\n        this._primaryColor = primaryColorName.toLowerCase();\n        this.setSolidColoredStar();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  FavoriteIconDirective.prototype.ngOnInit = function () {\n    if (this.isFavorite) {\n      this.setSolidColoredStar();\n    } else {\n      this.setWhiteSolidStar();\n    }\n  };\n  FavoriteIconDirective.prototype.onMouseEnter = function () {\n    if (!this.isFavorite) {\n      this.setBlackOulineStar();\n    }\n  };\n  FavoriteIconDirective.prototype.onMouseLeave = function () {\n    if (!this.isFavorite) {\n      this.setWhiteSolidStar();\n    }\n  };\n  FavoriteIconDirective.prototype.onClick = function () {\n    this.isFavorite = !this.isFavorite;\n    if (this.isFavorite) {\n      this.setSolidColoredStar();\n    } else {\n      this.setBlackOulineStar();\n    }\n  };\n  FavoriteIconDirective.prototype.setBlackOulineStar = function () {\n    this.setStarColor('black');\n    this.setStarClass('outline');\n  };\n  FavoriteIconDirective.prototype.setSolidColoredStar = function () {\n    this.setStarColor(this._primaryColor);\n    this.setStarClass('solid');\n  };\n  FavoriteIconDirective.prototype.setWhiteSolidStar = function () {\n    this.setStarColor('white');\n    this.setStarClass('solid');\n  };\n  FavoriteIconDirective.prototype.setStarClass = function (starType) {\n    var className = this.getStarClasses(starType);\n    this.renderer.setProperty(this.element, 'class', className);\n  };\n  FavoriteIconDirective.prototype.setStarColor = function (color) {\n    this.renderer.setProperty(this.element, 'color', color);\n  };\n  FavoriteIconDirective.prototype.getStarClasses = function (starType) {\n    var classNames = '';\n    switch (starType) {\n      case 'solid':\n        classNames = this._starClasses.SOLID_STAR;\n        break;\n      case 'outline':\n        classNames = this._starClasses.OUTLINE_STAR;\n        break;\n      default:\n        classNames = this._starClasses.SOLID_STAR;\n    }\n    return classNames;\n  };\n  FavoriteIconDirective.ɵfac = function FavoriteIconDirective_Factory(t) {\n    return new (t || FavoriteIconDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  FavoriteIconDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FavoriteIconDirective,\n    selectors: [[\"\", \"appFavoriteIcon\", \"\"]],\n    hostBindings: function FavoriteIconDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseenter\", function FavoriteIconDirective_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function FavoriteIconDirective_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        })(\"click\", function FavoriteIconDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      isFavorite: [\"appFavoriteIcon\", \"isFavorite\"],\n      color: \"color\"\n    }\n  });\n  return FavoriteIconDirective;\n}();\nexport { FavoriteIconDirective };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}